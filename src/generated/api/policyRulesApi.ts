/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { CreatePolicyRuleRequest } from "../model/createPolicyRuleRequest";
import { PolicyRuleDeleteResponse } from "../model/policyRuleDeleteResponse";
import { PolicyRuleResponse } from "../model/policyRuleResponse";
import { PolicyRulesResponse } from "../model/policyRulesResponse";
import { UpdatePolicyRuleRequest } from "../model/updatePolicyRuleRequest";

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from "../model/models";
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api.openfort.xyz";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PolicyRulesApiApiKeys {}

export class PolicyRulesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    protected authentications = {
        default: <Authentication>new VoidAuth(),
        pk: new HttpBearerAuth(),
    };

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PolicyRulesApiApiKeys, value: string) {
        (this.authentications as any)[PolicyRulesApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.pk.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Creates an allow function object.
     * @param createPolicyRuleRequest
     */
    public async createPolicyRules(
        createPolicyRuleRequest: CreatePolicyRuleRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body: PolicyRuleResponse }> {
        const localVarPath = this.basePath + "/v1/policy_rules";
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ["application/json"];
        // give precedence to 'application/json'
        if (produces.indexOf("application/json") >= 0) {
            localVarHeaderParams.Accept = "application/json";
        } else {
            localVarHeaderParams.Accept = produces.join(",");
        }
        let localVarFormParams: any = {};

        // verify required parameter 'createPolicyRuleRequest' is not null or undefined
        if (createPolicyRuleRequest === null || createPolicyRuleRequest === undefined) {
            throw new Error(
                "Required parameter createPolicyRuleRequest was null or undefined when calling createPolicyRules.",
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPolicyRuleRequest, "CreatePolicyRuleRequest"),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.pk.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.pk.applyToRequest(localVarRequestOptions),
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PolicyRuleResponse }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PolicyRuleResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes an polciy rule (allow_functions) object.
     * @param id
     */
    public async deletePolicyRules(
        id: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body: PolicyRuleDeleteResponse }> {
        const localVarPath =
            this.basePath + "/v1/policy_rules/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ["application/json"];
        // give precedence to 'application/json'
        if (produces.indexOf("application/json") >= 0) {
            localVarHeaderParams.Accept = "application/json";
        } else {
            localVarHeaderParams.Accept = produces.join(",");
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling deletePolicyRules.");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: "DELETE",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.pk.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.pk.applyToRequest(localVarRequestOptions),
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{
                response: http.IncomingMessage;
                body: PolicyRuleDeleteResponse;
            }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PolicyRuleDeleteResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
     * @param expand
     * @param policy Specifies the unique policy ID.
     */
    public async getPolicyRules(
        expand?: Array<string>,
        policy?: string,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body: PolicyRulesResponse }> {
        const localVarPath = this.basePath + "/v1/policy_rules";
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ["application/json"];
        // give precedence to 'application/json'
        if (produces.indexOf("application/json") >= 0) {
            localVarHeaderParams.Accept = "application/json";
        } else {
            localVarHeaderParams.Accept = produces.join(",");
        }
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters["expand"] = ObjectSerializer.serialize(expand, "Array<string>");
        }

        if (policy !== undefined) {
            localVarQueryParameters["policy"] = ObjectSerializer.serialize(policy, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.pk.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.pk.applyToRequest(localVarRequestOptions),
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PolicyRulesResponse }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PolicyRulesResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates an allow functions object.
     * @param id Specifies the unique allow function ID.
     * @param updatePolicyRuleRequest
     */
    public async updatePolicyRules(
        id: string,
        updatePolicyRuleRequest: UpdatePolicyRuleRequest,
        options: { headers: { [name: string]: string } } = { headers: {} },
    ): Promise<{ response: http.IncomingMessage; body: PolicyRuleResponse }> {
        const localVarPath =
            this.basePath + "/v1/policy_rules/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ["application/json"];
        // give precedence to 'application/json'
        if (produces.indexOf("application/json") >= 0) {
            localVarHeaderParams.Accept = "application/json";
        } else {
            localVarHeaderParams.Accept = produces.join(",");
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling updatePolicyRules.");
        }

        // verify required parameter 'updatePolicyRuleRequest' is not null or undefined
        if (updatePolicyRuleRequest === null || updatePolicyRuleRequest === undefined) {
            throw new Error(
                "Required parameter updatePolicyRuleRequest was null or undefined when calling updatePolicyRules.",
            );
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updatePolicyRuleRequest, "UpdatePolicyRuleRequest"),
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.pk.accessToken) {
            authenticationPromise = authenticationPromise.then(() =>
                this.authentications.pk.applyToRequest(localVarRequestOptions),
            );
        }
        authenticationPromise = authenticationPromise.then(() =>
            this.authentications.default.applyToRequest(localVarRequestOptions),
        );

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PolicyRuleResponse }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PolicyRuleResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
